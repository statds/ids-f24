## Spatial Data Visualization with Google Map

Hi! My name is Jack Bienvenue, a senior in 
Statistical Data Science.

In this section, I'll walk you through how to begin
with spatial data visualizations.

Specifically, in this section we'll talk about using
*Google Maps* as a tool to visualize spatial data.

We will start by talking about Google and their spatial 
data products, but work our way into something more aligned 
with our needs, which is integrating code into our Python
scripts to generate Google Maps versions of our outputs.

This section will be capped off with some example code of 
using Google Maps to create a heatmap of crash data in 
New York City.

*[Skip to proceed to purely technical information by clicking here](##Getting-Started-in-Google-Maps-Platform)*

Enjoy and keep learning!

### Introducing Spatial Data

#### Having fun with spatial data

Spatial data handling and visualization introduces new challenges, softwares, and packages.

Spatial data operations can be time-consuming and the pathway to your desired results is often unclear.

**Stay patient, have fun**

![Map of all the locations in NYC where I have eaten a bagel](images/Bagels_map.png)

Above is an example of me having fun with spatial data. 

There are so many fun things to do with data visualization. Remember,
you have the skillset to do things that almost nobody can! Make the most
of it for yourself and for the world.

#### Why Spatial Data?

**Spatial trends matter**. They allow us to do things like:

- Understand geographic localizations of trends
    - Unveil hidden trends
- Evaluate how social factors may influence trends
    - Create information to address disparities
- Provide recommendations to relevant local authorities

### Google & Spatial Data

#### Google Spatial Data Products:

Google offers several products for performing Geographic Information Science (GIS) tasks. These include:

- Google MyMaps
    - A simple, no-code way to visualize data
- Google Earth Engine
    - Enhanced computing capabilities for analytic tasks
- Google Maps Platform
    - Comprehensive map construction, focused on visualization

#### Google MyMaps

Google MyMaps allows for visualization of line and point data. 

![Image of MyMaps UI. As we can see, there is a very small extent of functionality.](images/MyMap.png)

#### Google Earth Engine

Google Earth Engine is used for **remote sensing** applications. 

It uses JavaScript.

It pairs well with landcover classification to aid in tasks like:

- Landcover Classification
    - Tracking deforestation
    - Habitat Monitoring
    - **Solar Panel Identification**

#### Google Earth Engine Example

Here's an example of Google Earth Engine being used to identify commercial solar properties to fill in missing data:

![Example of Landcover classifcation model in GEE](images/GEE_example.png)

#### Google Maps Platform

Google Maps Platform significantly broadens capabilities. 

It allows us to perform tasks such as:

- Coalescing nearby points into clusters for zooming
- Creating heat maps from point data
- Embedding maps into websites
- Automatically translating a map into a user's language
- 3D geospatial visualization
- and more!

### Getting Started in Google Maps Platform

#### Why Google Maps Platform?

We want to be able to include maps right inside of our Python code, so Google Maps will be our platform of choice. 

Google Maps Platform uses Google Cloud computing. 

We must log in and do some setup there first.

#### Google Cloud Platform

Google Cloud Platform [is accessible here.](https://console.cloud.google.com/)

UConn terminated Google accounts in 2024, so to access Google Cloud Console, sign in with your **personal email**.

#### Accessing the console
To access Google Maps Platform, we must enter our Google Cloud Console.

Navigate to console.cloud.google.com to view your console. It should look like this. Press "select project" and create your new project. 

![](images/Select_Project.png)

#### Building Project

→ "Select a Project"

→ "New Project"

→ Name your project, set location as 'No Organization'

→ "Create"

→ Select newly created project

→ Next, we'll set up an API key in the following slides

#### API: What is an API?

API stands for "Application Programming Interface." 

**Google Maps API** is a set of tools allowing us to perform tasks like:

- Visualizing data and embedding it into websites
- Route finding
- 3D map viewing
    - Street view, etc. 
- And more!

#### API: What are API keys?

An API Key allows us to access our projects **exclusively**

Generate an API key for your Maps project in Google Cloud here:

![Where to navigate to generate API key](images/Make_API_key.png)

#### API: Enabling necessary APIs

In this example, we will visualize our data as a heat map. For this we will need to enable the following APIs:

- Maps JavaScript API
- Maps Datasets API
- Places API

*(Select 'APIs and Services' from the left sidebar to access)*

#### Python and Google Maps

Let's begin by downloading our packages in terminal or an equivalent command shell:

``` zsh
% pip install googlemaps 
% pip install gmplot
```

Now we can start working with Google Maps in Python!

- googlemaps
    - Provides access to Google Maps Platform services in a Python client
- gmplot
    - Primarily for plotting

### Using googlemaps and gmplot

#### gmplot: Initialization

We'll use the standardized nyccrashes_cleaned.feather file provided in the coursenotes for our examples. 

``` zsh
% pip install pyarrow
```

``` {python}
import pandas as pd
import gmplot
import os
df = pd.read_feather('data/nyccrashes_cleaned.feather')
```

#### gmplot

Here's some example code for gmplot using the cleaned NYC Crashes Dataset:

``` python
import os
import pandas as pd
import gmplot

## Load the dataset using pd.read_feather()
df = pd.read_feather('data/nyccrashes_cleaned.feather')

#NaN values prevent plotting, let's remove them:
df = df.dropna(subset=['latitude', 'longitude'])

## Insert API key (substitute with your own!)
api_key_file_path = "api_key.txt"
with open(file_path, 'r') as file:
    api_key = file.read().strip()

## Center the map on NYC using the mean center
center_lat = df['latitude'].mean()
center_lon = df['longitude'].mean()

## Create gmplot object (third argument is the zoom level)
gmap = gmplot.GoogleMapPlotter(center_lat, center_lon, 11, apikey=api_key)

## Extract latitudes and longitudes directly
latitudes = df['latitude'].tolist()
longitudes = df['longitude'].tolist()

## Plot all points at once
gmap.scatter(latitudes, longitudes, marker=True, size=20, color='red')

## Define output path
output_dir = "map_outputs"
output_path = os.path.join(output_dir, "nyccrashes_map.html")

## Create the output directory if it doesn't exist
os.makedirs(output_dir, exist_ok=True)

## Save the map
gmap.draw(output_path)
```

#### gmplot example code output:

You would retrieve this as an html generated in the specified directory, but for this presentation I'll show this as an image:

![Output of example code](images/gmplot_output.png)

#### gmplot: Heat Maps

Here's some example code for a heat map:

``` python
## Now create a heatmap

## Create a new gmplot object for the heatmap
heatmap = gmplot.GoogleMapPlotter(center_lat, center_lon, 11,
          apikey=api_key)

## Plot the heatmap
heatmap.heatmap(latitudes, longitudes)

## Define output path for heatmap
heatmap_output_path = os.path.join(output_dir, "nyccrashes_heatmap.html")

## Save the heatmap
heatmap.draw(heatmap_output_path)
```

(Woods 2017)

### gmplot Heat Map Example

![Heat map output; *Remark: multiple gmplot html outputs might not reliably work for a single script*](images/heatmap_output.png)

### Googlemaps

Googlemaps as a package is valuable in allowing us to access advanced functionality, beyond the scope of this write-up. Access more information [here](###References). (Google 2023)

### Conclusion

#### Geospatial Visualization

There are a range of different geospatial visualization platforms.

But, using Python, you can do all the spatial visualization you need right in your code!

#### Thank you!

Best of luck with your spatial data visualization! Keep learning.

### References

- Woods, M. (2017). gmplot: Plotting data on Google Maps, the easy (stupid) way. URL: Https://Github.Com/Gmplot/Gmplot.

- Google. (2023). googlemaps (v4.7.3) [Python package]. PyPI. https://pypi.org/project/googlemaps/
